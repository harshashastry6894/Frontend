How JS works ?
- Everything in js happens inside the execution context
- Execution context is like a container and it has 2 component
1. Memory component:
    - All the variables and functions are stored in Memory component (key value pair & func)
    - it is also known as variable environment
2. Code component:
    - Code will be executed one at a time.
    - it is also known as thread of execution (a thread executes code one at a time)

- JS is synchronous single threaded language
- JS executes one command at a time in sequential order
- JS will move to next line once a line execution is completed
================================================================================================================
How JS code is executed?
- Every js code executes in execution context
- execution context is created in 2 phases
- Initial value for variable is undefined and function is entire function code
- execution will happen in call stack which order the executionof code
ex: 
var n = 2;
function square(num) {
    var ans = num * num;
    return ans;
}
var square2 = square(2);
var square4 = square(4)
1. Memory creation phase
    - n: undefined, 2
    - square : {...} entire code of function
    - square2: undefined, 4
    - square4: undefined, 16
2. Code execution phase
    - when a function starts execution again a new execution context will be created in Memory
    - num: undefined, 2, 4
    - ans: undefined, 4, 16

watch : https://www.youtube.com/watch?v=iLWTnMzWtj4&list=PLlasXeu85E9cQ32gLCvAvr9vNaUccPVNP&index=3
================================================================================================================
Hoisting in js?
    - Hoisting is the default behaviour in js in which variable and function will be hoisted 
      to the top of the execution
    --------------------------------------------
    var x = 7;
    function getName() {
        console.log('Namaste js');
    }
    getName(); // Namaste js
    console.log(x) // 7
    --------------------------------------------
    getName(); // Namaste js
    console.log(x) // undefined
    var x = 7;
    function getName() {
        console.log('Namaste js');
    }
    -------------------------------------------
    getName; // shows declaration of func
    console.log(x) // reference error x is not defined
    function getName() {
        console.log('Namaste js');
    }
    --------------------------------------------
    getName(); // getName is not a function ( behaves as a variable)
    console.log(x) // undefined
    var x = 7;
    const getName = () => {
        console.log('Namaste js');
    }
================================================================================================================
null vs undefined ?
    In JavaScript, undefined is a type, whereas null an object.
    null is an assigned value. It means nothing.
    undefined typically means a variable has been declared but not defined yet.
    null and undefined are falsy values.
    null and undefined are both primitives. However an error shows that typeof null = object.
    null !== undefined but null == undefined.
    ----------------------------------------------------------------------
    Practical Differences:
    All of this is great, but what about a practical difference between null and undefined?
    Consider the following code snippet:
    let logHi = (str = 'hi') => {
    console.log(str);
    }
    The code above creates a function named logHi. This function requires one parameter and 
    sets the default of that parameter to hi if it isn’t supplied. Here’s what that looks like:
    logHi();
    // hi
    We can also supply a parameter to overwrite this default:
    logHi('bye');
    // bye
    With default parameters, undefined will use the default while null does not.
    logHi(undefined);
    // hi
    logHi(null);
    // null
================================================================================================================
Scope in js ?
- Scope in js related to lexical environment
- lexical scope is the scope of local block along with lexical scope of parent block
================================================================================================================
let & const ?
- let and const are also hoisted but it will be in temporal dead zone (a seperate memory space which cannot be access)
- After initalizing let and const can be accessed
- reference error: accessing variable without declaration 
- syntax error: any error in syntax (declaring x with let and var)
- type error: type mismatch error (assigning value later to const)
================================================================================================================
block ?
- {} - is a block
- block is used combine multiple js statement to group
- let and const are block scope and var is function scope or global scope
more details: https://www.youtube.com/watch?v=lW_erSjyMeM&list=PLlasXeu85E9cQ32gLCvAvr9vNaUccPVNP&index=10
================================================================================================================
Debouncing and throttling ?
- used for optimizing and performance of web app
================================================================================================================
closure ?
- Function along with it's lexical environment bundled together forms a closure
- Uses of closure
- currying
- in async and promise
ex: function x() {
    var a =7;
    function y() {
        console.log(a);
    }
    return y;
};
var z = x();
z() // 7
--------------------------------------------------------------------------------------------
function x() {
    var a =7;
    function y() {
        console.log(a);
    }
    a = 100;
    return y;
};
var z = x();
z() // 100

closure imp: https://www.youtube.com/watch?v=eBTBG4nda2A&list=PLlasXeu85E9cQ32gLCvAvr9vNaUccPVNP&index=13
================================================================================================================
First class function ?
- A abiliy of a function to call another function and use arguments and return a value is called first class function
- Function statement or declaration:
    function a() {
        console.log('hi');
    }
- Function expression:
    var b = function() {
        console.log('hi');
    }
- Anonymous function:
    function () {
        console.log('hi');
    }
- Named function:
    var b = function a() {
        console.log('hi');
    }
================================================================================================================
callback and event loop?
- callback function is a function which will be passed as arguments to another function and this callback
function will be called after calling another function
https://www.youtube.com/watch?v=8zKuNo4ay8E&list=PLlasXeu85E9cQ32gLCvAvr9vNaUccPVNP&index=17 - event loop