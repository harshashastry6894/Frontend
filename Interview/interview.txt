JS
1.scoping in java script
2.hoisting in java script
3.clouser in java script
4.lexican scoping
5.what is the difference b/w == and===
6.what happned if compare two objects with == and === then
7.what is the difference b/w call,apply and bind
8.what is arrow function
9.Higher order function (elevorate more)
10.What is event bubbling
11.Explain event loop
12.What is the use of this keyword in java script
13.Let a=10 and var b=10 then what will be the answere when i compare a===b
14.in acomponent how can i access history,location
15.what is prototype in java script.
16. what is the difference b/w proto and prototype
17.what is controlled and uncontrolled components.
18.how can you compare two objects. suppose i have two objects a and b .i have to compare both of them
   they have contained the same value same keys all the properties inside the objects should be same.
19. java script is single thread or multi thread language
20.explain syncronous and asyncronous.
21.how can i create auto save form. i am typing in a  input field of a form when i stop typing  in input field the form will be submitted automatically. 
22.what is the difference b/w local storage, cookies, session storage.
23.How does prototypal inheritance work, and how is it different from classical inheritance?
24.How does this work?
25.What is event bubbling and how does it work?

REACT JS
1.what is functional components
0.what is life cycle in react js
1.phases of life cycle
2.lifecycles of mounting, updating and unmount phases
3.suppose you have two components child and patent both component written in unmounting lifecycle
 inwhich sequence unmounting lifecycle will be called.
4.if i will invoke the parent component which constructor will be called first.
5.what is use effect.
6.use effect contains which lifecycles.
7.what is redux architecture and its use
8.can we use multiple stores in redux if yes then how
9.what is the use of redux thunk
10.what is synthetic events
11.what is reff,wrap
12.what is key
13.what is key props (have you ever use key props)
14. what is virtual dom in react js
15.what is real dom
16.what is the problem in direct update dome
17.node update by vitual dom and direct update real node in dom
18.what is pure component
19.what is the use of react router
20.what is react hooks
21.how can we access route related props in react

-------------------------------------------------------------------------------
Sapiens:
async function Test() {}
Test()
    .then(x => console.log(x))
    .catch(x => console.log(x))


class OwnMath {
    constructor(a, b) {
        this.x = a;
        this.y = b;
    }

    add() {
        return this.x + this.y
    }

    sub() {
        return this.x - this.y
    }

    mul() {
        return this.x * this.y
    }
}
const m = new OwnMath(1, 2);
console.log(m.add().sub().mul());

function Test() {
    return new Promise((reject) => reject(false));
}

async function Test() { }


Test().then(re => console.log('success', re))
    .catch(re => console.log('failure', re));

-------------------------------------------------------------------------------
Nium:

var a = [10, 20, 30, 40]
var b = [5, 3, 12, 12, 44, 6, 6]

var op1 = new Set([a, b]);
var op2 = [... new Set([a, b])]

console.log(op1)
console.log(op2)

var x = 10;
var boy = function () {
    console.log(x);
    var x = 20;
}
boy()

var x = 10;
boy()
var boy = function () {
    console.log(x);
    var x = 20;
}

var x = 10;
boy()
function boy() {
    console.log(x);
    var x = 20;
}

// how to restrict object not to change the value
let a = { name: 'harsha' };
a.name = 'suhas'
console.log(a)
const b = { name: 'shastry' };
b.name = 'suhas'
console.log(b)
--------------------------------------------------------------------------------
/*
// Sample code to perform I/O:

process.stdin.resume();
process.stdin.setEncoding("utf-8");
var stdin_input = "";

process.stdin.on("data", function (input) {
    stdin_input += input;                               // Reading input from STDIN
});

process.stdin.on("end", function () {
   main(stdin_input);
});

function main(input) {
    process.stdout.write("Hi, " + input + ".\n");       // Writing output to STDOUT
}

// Warning: Printing unwanted or ill-formatted data to output will cause the test cases to fail
*/

// Write your code here
process.stdin.resume();
process.stdin.setEncoding("utf-8");
var stdin_input = "";

process.stdin.on("data", function (input) {
    stdin_input += input;                               // Reading input from STDIN
});

process.stdin.on("end", function () {
   main(stdin_input);
});

function main(input) {
    const split = input.split('\n');
    const size = split[0];
    const elements = split[1].split(' ');    
    let total = parseInt(elements[0]), prev = parseInt(elements[0]);
    for(let i=0; i < size; i++) {
        const curr = parseInt(elements[i]);
        if(prev * 2 === curr) {
            prev = curr;
            total += curr;
        }
    }
    
    process.stdout.write(total.toString()); 
}
