Selection sort:
	similar to bubble sort but instead of first placing values into sorted position,
    it places small values into sorted position

Implemenation:
	psuedo code:
		1. store first element as smallest value
		2. compare this item to the next item in the array untill you find a smaller number
		3. if a smaller number is found, designate that smaller number as new "minimum" and continue till end of array
		4. if the minimum is not the value(index) you initially began then swap those 2 values

    code:
        const selectionSort = (arr) => {
        for (let i = 0; i <= arr.length - 1; i++) {
            let smallest = i;
            for (let j = i + 1; j <= arr.length - 1; j++) {
                if (arr[j] < arr[smallest]) {
                    smallest = j;
                }
            }
            if (i !== smallest) {
                const temp = arr[i];
                arr[i] = arr[smallest];
                arr[smallest] = temp;
            }
        }
        return arr;
    }

    console.log(selectionSort([8, -3, 12, 29, 45, 88, 97]));

time complexity
	best worst naverage: O(n2) 
space complexity
    O(1)

Note: better than bubbleSort since we are not going to swap at every iteration

Selection sort is efficient where swapping operation is costly as it makes a maximum of N swaps for an array of size N.
Bubble sort is the simplest stable in-place sorting algorithm and very easy to code.
Insertion sort makes fewer comparisons compared to the other two algorithms and hence is efficient where comparison operation is costly
    
