function quickSort(arr) {
    // Base case: an array with 0 or 1 elements is already sorted
    if (arr.length <= 1) {
        return arr;
    }

    // Choose a pivot (here we're using the last element)
    const pivot = arr[arr.length - 1];
    const left = [];
    const right = [];

    // Partition the array into left and right
    for (let i = 0; i < arr.length - 1; i++) {
        if (arr[i] < pivot) {
            left.push(arr[i]);
        } else {
            right.push(arr[i]);
        }
    }

    // Recursively sort the left and right sub-arrays, and combine with pivot
    return [...quickSort(left), pivot, ...quickSort(right)];
}

time complexity
	best worst naverage: O(nlogn)
	
space complexity
    O(n)



