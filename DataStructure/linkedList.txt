Linked List:
    A data structure that contains a head, tail and length property.
    Linked Lists consist of nodes, and each node has a value and a pointer to another node or null

class Node {
    constructor(val) {
        this.val = val;
        this.next = null;
    }
}

class SinglyLinkedList {
    constructor() {
        this.head = null;
        this.tail = null;
        this.length = 0;
    }

    push(val) {
        var newNode = new Node(val);
        if (this.length === 0) {
            this.head = newNode;
            this.tail = newNode;
        } else {
            this.tail.next = newNode;
            this.tail = newNode;
        }
        this.length++;
        return this;
    }

    unShift(val) {
        var newNode = new Node(val);
        if (this.length === 0) {
            this.head = newNode;
            this.tail = newNode;
        } else {
            newNode.next = this.head;
            this.head = newNode;
        }
        this.length++;
        return this;
    }

    pop() {
        if (this.length === 0) return undefined;
        var currentNode = this.head;
        if (this.length === 1) {
            this.head = null;
            this.tail = null;
        } else {
            var newTail = currentNode;
            while (currentNode.next) {
                newTail = currentNode;
                currentNode = currentNode.next;
            }
            this.tail = newTail;
            this.tail.next = null;
        }
        this.length--;
        return currentNode;
    }

    shift() {
        if (this.length === 0) return undefined;
        var currentNode = this.head;
        if (this.length === 1) {
            this.head = null;
            this.tail = null;
        } else {
            this.head = currentNode.next;
            currentNode.next = null;
        }
        this.length--;
        return currentNode;
    }

    get(index) {
        if (index < 0 || index >= this.length) return undefined;
        var count = 0;
        var currentNode = this.head;
        while (count !== index) {
            currentNode = currentNode.next;
            count++;
        }
        return currentNode;
    }

    set(index, value) {
        var foundNode = this.get(index);
        if (foundNode) {
            foundNode.val = value;
            return true;
        } else {
            return false;
        }
    }

    insert(index, value) {
        if (index < 0 || index > this.length) return false;
        if (index === 0) {
            this.unShift(value);
            return true;
        }
        if (index === this.length) {
            this.push(value);
            return true;
        }
        var newNode = new Node(value);
        var prev = this.get(index - 1);
        var temp = prev.next;
        prev.next = newNode;
        newNode.next = temp;
        this.length++;
        return true;
    }

    remove(index) {
        if (index < 0 || index > this.length) return undefined;
        if (index === 0) return this.shift();
        if (index === this.length - 1) return this.pop();
        var prev = this.get(index - 1);
        var removed = prev.next;
        prev.next = removed.next;
        removed.next = null;
        this.length--;
        return removed;
    }
	
	reverse() {
        var prev = null, next;
        var curr = this.head;
        this.head = this.tail
        this.tail = curr;
        while(curr) {
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next
        }
        return this;
    }
}

var list = new SinglyLinkedList();
list.push("Hello");
list.push("Harsha");
list.push("Shastry");
console.log(list.insert(3, "S"));
console.log(list);
