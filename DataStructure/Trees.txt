Traversing a tree 2 ways:
	Breadth-first Search
	Depth-first Search

Breadth-first Search
	Create a queue (this can be an array) and a variable to store the values of nodes visited
	Place the root node in the queue
	Loop as long as there is anything in the queue
		Dequeue a node from the queue and push the value of the node into the variable that stores the nodes
		If there is a left property on the node dequeued - add it to the queue
		If there is a right property on the node dequeued - add it to the queue
	Return the variable that stores the values
	
	BFS() {
        var queue = [], visited = [];
        var curr = this.root;
        queue.push(curr);
        while(queue.length) {
            curr = queue.shift();
            visited.push(node.value);
            if(curr.left) queue.push(node.left);
            if(curr.right) queue.push(node.right);            
        }
        return visited;
    }

    
DFS - PreOrder
	Create a variable to store the values of nodes visited
	Store the root of the BST in a variable called current
	Write a helper function which accepts a node
		Push the value of the node to the variable that stores the values
		If the node has a left property, call the helper function with the left property on the node
		If the node has a right property, call the helper function with the right property on the node
		Invoke the helper function with the current variable

	DFSPreorder() {
        var visited = [];
        function traverse(node) {
            visited.push(node.value);
            if(node.left) traverse(node.left);
            if(node.right) traverse(node.right);            
        }
        traverse(this.root);
        return visited;
    }

    DFSPostorder() {
        var visited = [];
        function traverse(node) {            
            if(node.left) traverse(node.left);
            if(node.right) traverse(node.right);
            visited.push(node.value);          
        }
        traverse(this.root);
        return visited;
    }
     DFSInOrder() {
        var visited = [];
        function traverse(node) {            
            if(node.left) traverse(node.left);
            visited.push(node.value); 
            if(node.right) traverse(node.right);                     
        }
        traverse(this.root);
        return visited;
    }


