Tree
	A data structure that consists of nodes in a parent / child relationship
	
	Root - The top node in a tree.
	Child - A node directly connected to another node when moving away from the Root.
	Parent - The converse notion of a child.
	Siblings -A group of nodes with the same parent.
	Leaf - A node with no children.
	Edge - The connection between one node and another.
	
Uses - HTML DOM, Network routing, Folder structure

Binary search tree
	- Every parent node has at most two children
	- Every node to the left of a parent node is always less than the parent
	- Every node to the right of a parent node is always greater than the parent
	- Searching is faster compared to unsorted tree
	
INSERTING A NODE
Steps - Iteratively or Recursively

Create a new node
Starting at the root
	Check if there is a root, if not - the root now becomes that new node!
	If there is a root, check if the value of the new node is greater than or less than the value of the root
	If it is greater 
		Check to see if there is a node to the right
			If there is, move to that node and repeat these steps
			If there is not, add that node as the right property
	If it is less
		Check to see if there is a node to the left
			If there is, move to that node and repeat these steps
			If there is not, add that node as the left property

Finding a Node in a BST
Steps - Iteratively or Recursively

Starting at the root
	Check if there is a root, if not - we're done searching!
	If there is a root, check if the value of the new node is the value we are looking for. If we found it, we're done!
	If not, check to see if the value is greater than or less than the value of the root
	If it is greater 
		Check to see if there is a node to the right
		If there is, move to that node and repeat these steps
		If there is not, we're done searching!
	If it is less
		Check to see if there is a node to the left
		If there is, move to that node and repeat these steps
		If there is not, we're done searching!
			
class Node {
    constructor(value) {
        this.value = value;
        this.left = null;
        this.right = null;
    }
}

class Bst {
    constructor() {
        this.root = null;
    }

    insert(value) {
        var newNode = new Node(value);
        if (!this.root) {
            this.root = newNode;
            return true;
        }
        var current = this.root;
        while (true) {
            if (value === current.value) return false;
            if (value < current.value) {
                if (current.left === null) {
                    current.left = newNode;
                    return true;
                } else {
                    current = current.left;
                }
            }
            else if (value > current.value) {
                if (current.right === null) {
                    current.right = newNode;
                    return true;
                } else {
                    current = current.right;
                }
            }
        }
    }

   search(item) {
        if(!this.root) return false;
        var curr = this.root;
        while(curr && true) {
            if(item === curr.value) return true;
            if(item <= curr.value) {
                    curr = curr.left;
            } else {
                    curr = curr.right;
            }
        }
        return false;
    }
}

var tree = new Bst();
tree.insert(10);
tree.insert(5)
tree.insert(6)
tree.insert(8)
tree.insert(12)
tree.insert(15)
tree.insert(65)
tree.insert(18)
tree.insert(12)
console.log(tree);


Time Complexity:
search and insert: O(logn)